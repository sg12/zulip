import $ from "jquery";
import * as compose_call_ui from "./compose_call_ui.ts";
import * as narrow_state from "./narrow_state.ts";

let callUrl: string | null = null;
let isInAudioChannel = false;

function delay(ms: number) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ –∏–∑ —á–∞—Ç–∞
function searchForLink() {
    const messageLinks = $(".message_content a").get().reverse(); // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    console.log("messageLinks", messageLinks);
    for (const link of messageLinks) {
        const href = $(link).attr("href");
        // todo: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ bbb
        if (href && href.includes("meet.jit.si")) {
            callUrl = href;
            break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Å—Å—ã–ª–∫—É
        }
    }
}

export async function enterAudioChannel() {
    try {
        callUrl = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫
        const container = document.getElementById("audio-call-container");
        if (!container) {
            console.error("Element with id 'audio-call-container' not found");
            return;
        }

        if (!callUrl) {
            searchForLink();
        }

        if (!callUrl) {
            $("#left_bar_compose_reply_button_big").click(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏
            await delay(100); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã —á–∞—Ç —É—Å–ø–µ–ª –æ—Ç–∫—Ä—ã—Ç—å—Å—è

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ –≤ —á–∞—Ç
            compose_call_ui.generate_and_insert_audio_or_video_call_link($(".video_link"), false)

            $("#compose-send-button").click(); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π

            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            searchForLink();
        }

        // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ —Å—Ç–∞–≤–∏–º 75 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        const maxHeight = window.innerHeight;
        const iframeHeight = Math.floor(maxHeight * 0.75);

        // –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ iframe —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≤—ã—Å–æ—Ç–æ–π
        container.innerHTML = '<iframe id="audio-call-iframe" src="' + callUrl + '" width="100%" height="' + iframeHeight + 'px" frameborder="0" allow="microphone *; camera *; display-capture *;" allowfullscreen style="box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);"></iframe>';

        // –°–∫—Ä—ã–≤–∞–µ–º –ª–∏—à–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        $("#compose-content").hide();
        $("#bottom_whitespace").hide();
        $(".recipient_row").hide();

        // todo: –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ª–æ–≤–∫—É –æ—à–∏–±–æ–∫ –≤–Ω—É—Ç—Ä–∏ iframe –∏–∑ bbb
    } catch (error) {
        console.error("Error creating call:", error);
    }
}

export function exitAudioChannel() {
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
    $("#compose-content").show();
    $("#bottom_whitespace").show();
    $(".recipient_row").show();
    const container = document.getElementById("audio-call-container");
    if (container) {
        container.innerHTML = '';
    }
}

export function initialize(): void {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —ç–ª–µ–º–µ–Ω—Ç–µ —Å id="message-lists-container"
    const targetNode = document.getElementById("message-lists-container");
    if (targetNode) {
        const observer = new MutationObserver(() => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–µ–º–µ —Å –∏–∫–æ–Ω–∫–æ–π üîä
            const topicName = narrow_state.topic();
            if (topicName && topicName.includes("üîä")) {
                if (!isInAudioChannel) {
                    isInAudioChannel = true;
                }
            } else {
                if (isInAudioChannel) {
                    isInAudioChannel = false;
                    callUrl = null;
                    exitAudioChannel();
                }
            }
        });
        observer.observe(targetNode, { childList: true, subtree: true });
    }
}
